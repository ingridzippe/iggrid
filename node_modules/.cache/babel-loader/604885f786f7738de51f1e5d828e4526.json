{"ast":null,"code":"var _jsxFileName = \"/Users/wyndolbar/Desktop/simplecoding/random/react-dnd-grid-tutorial/src/GridContext.js\";\nimport React, { View, Component, createContext } from \"react\";\nimport sampleItems from './sampleItems';\nimport firebase from \"firebase/app\";\nimport \"firebase/analytics\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\"; // Helper functions\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n  return move(array, index, newIndex);\n} // Context\n\n\nconst GridContext = createContext({\n  items: []\n});\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setItems = items => this.setState({\n      items\n    });\n\n    this.moveItem = (sourceId, destinationId) => {\n      const sourceIndex = this.state.items.findIndex(item => item.id === sourceId);\n      const destinationIndex = this.state.items.findIndex(item => item.id === destinationId); // If source/destination is unknown, do nothing.\n\n      if (sourceId === -1 || destinationId === -1) {\n        return;\n      }\n\n      const offset = destinationIndex - sourceIndex;\n      this.setState(state => ({\n        items: moveElement(state.items, sourceIndex, offset)\n      }));\n    };\n\n    this.state = {\n      items: sampleItems,\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n\n  componentDidMount() {// this.getGrid();\n  } // getGrid() {\n  //   var gridRef = firebase.database().ref('grids/' + 1);\n  //   gridRef.on('value', (snapshot) => {\n  //     const data = snapshot.val();\n  //     this.setState({ items: data })\n  //     console.log('items state')\n  //     console.log(this.state.items)\n  //   });\n  // }\n\n\n  clicked() {\n    console.log('clicked');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GridContext.Provider, {\n      value: this.state,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        border: \"10px solid #f00\"\n      },\n      onClick: this.clicked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, this.props.children));\n  }\n\n}\nexport default GridContext;","map":{"version":3,"sources":["/Users/wyndolbar/Desktop/simplecoding/random/react-dnd-grid-tutorial/src/GridContext.js"],"names":["React","View","Component","createContext","sampleItems","firebase","move","array","oldIndex","newIndex","length","splice","moveElement","index","offset","GridContext","items","GridProvider","constructor","props","setItems","setState","moveItem","sourceId","destinationId","sourceIndex","state","findIndex","item","id","destinationIndex","componentDidMount","clicked","console","log","render","width","height","border","children"],"mappings":"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","sourcesContent":["import React, { View, Component, createContext } from \"react\";\nimport sampleItems from './sampleItems';\nimport firebase from \"firebase/app\";\nimport \"firebase/analytics\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\n\n// Helper functions\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n\n  return move(array, index, newIndex);\n}\n\n// Context\n\nconst GridContext = createContext({ items: [] });\n\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: sampleItems,\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n  componentDidMount() {\n    // this.getGrid();\n  }\n  // getGrid() {\n  //   var gridRef = firebase.database().ref('grids/' + 1);\n  //   gridRef.on('value', (snapshot) => {\n  //     const data = snapshot.val();\n  //     this.setState({ items: data })\n  //     console.log('items state')\n  //     console.log(this.state.items)\n  //   });\n  // }\n  clicked() {\n    console.log('clicked')\n  }\n  render() {\n    return (\n      <View>\n        <GridContext.Provider value={this.state} style={{width: \"100%\", height: \"100%\", border: \"10px solid #f00\"}} onClick={this.clicked}>\n          {this.props.children}\n        </GridContext.Provider>\n      </View>\n    );\n  }\n\n  setItems = items => this.setState({ items });\n\n  moveItem = (sourceId, destinationId) => {\n    const sourceIndex = this.state.items.findIndex(\n      item => item.id === sourceId\n    );\n    const destinationIndex = this.state.items.findIndex(\n      item => item.id === destinationId\n    );\n\n    // If source/destination is unknown, do nothing.\n    if (sourceId === -1 || destinationId === -1) {\n      return;\n    }\n\n    const offset = destinationIndex - sourceIndex;\n\n    this.setState(state => ({\n      items: moveElement(state.items, sourceIndex, offset)\n    }));\n  };\n}\n\nexport default GridContext;\n"]},"metadata":{},"sourceType":"module"}