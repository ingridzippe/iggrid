{"ast":null,"code":"var _jsxFileName = \"/Users/wyndolbar/Desktop/simplecoding/random/react-dnd-grid-tutorial/src/GridContext.js\";\nimport React, { Component, createContext } from \"react\";\nimport sampleItems from './sampleItems'; // Helper functions\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n  return move(array, index, newIndex);\n} // Context\n\n\nconst GridContext = createContext({\n  items: []\n});\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setItems = items => this.setState({\n      items\n    });\n\n    this.moveItem = (sourceId, destinationId) => {\n      const sourceIndex = this.state.items.findIndex(item => item.id === sourceId);\n      const destinationIndex = this.state.items.findIndex(item => item.id === destinationId); // If source/destination is unknown, do nothing.\n\n      if (sourceId === -1 || destinationId === -1) {\n        return;\n      }\n\n      const offset = destinationIndex - sourceIndex;\n      this.setState(state => ({\n        items: moveElement(state.items, sourceIndex, offset)\n      }));\n    };\n\n    this.state = {\n      items: sampleItems,\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(GridContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nexport default GridContext;","map":{"version":3,"sources":["/Users/wyndolbar/Desktop/simplecoding/random/react-dnd-grid-tutorial/src/GridContext.js"],"names":["React","Component","createContext","sampleItems","move","array","oldIndex","newIndex","length","splice","moveElement","index","offset","GridContext","items","GridProvider","constructor","props","setItems","setState","moveItem","sourceId","destinationId","sourceIndex","state","findIndex","item","id","destinationIndex","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqBC,QAArB,EAA+BC,QAA/B,EAAyC;AACvC,MAAIA,QAAQ,IAAIF,KAAK,CAACG,MAAtB,EAA8B;AAC5BD,IAAAA,QAAQ,GAAGF,KAAK,CAACG,MAAN,GAAe,CAA1B;AACD;;AACDH,EAAAA,KAAK,CAACI,MAAN,CAAaF,QAAb,EAAuB,CAAvB,EAA0BF,KAAK,CAACI,MAAN,CAAaH,QAAb,EAAuB,CAAvB,EAA0B,CAA1B,CAA1B;AACA,SAAOD,KAAP;AACD;;AAED,SAASK,WAAT,CAAqBL,KAArB,EAA4BM,KAA5B,EAAmCC,MAAnC,EAA2C;AACzC,QAAML,QAAQ,GAAGI,KAAK,GAAGC,MAAzB;AAEA,SAAOR,IAAI,CAACC,KAAD,EAAQM,KAAR,EAAeJ,QAAf,CAAX;AACD,C,CAED;;;AAEA,MAAMM,WAAW,GAAGX,aAAa,CAAC;AAAEY,EAAAA,KAAK,EAAE;AAAT,CAAD,CAAjC;AAEA,OAAO,MAAMC,YAAN,SAA2Bd,SAA3B,CAAqC;AAC1Ce,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBnBC,QAjBmB,GAiBRJ,KAAK,IAAI,KAAKK,QAAL,CAAc;AAAEL,MAAAA;AAAF,KAAd,CAjBD;;AAAA,SAmBnBM,QAnBmB,GAmBR,CAACC,QAAD,EAAWC,aAAX,KAA6B;AACtC,YAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWV,KAAX,CAAiBW,SAAjB,CAClBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,QADF,CAApB;AAGA,YAAMO,gBAAgB,GAAG,KAAKJ,KAAL,CAAWV,KAAX,CAAiBW,SAAjB,CACvBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,aADG,CAAzB,CAJsC,CAQtC;;AACA,UAAID,QAAQ,KAAK,CAAC,CAAd,IAAmBC,aAAa,KAAK,CAAC,CAA1C,EAA6C;AAC3C;AACD;;AAED,YAAMV,MAAM,GAAGgB,gBAAgB,GAAGL,WAAlC;AAEA,WAAKJ,QAAL,CAAcK,KAAK,KAAK;AACtBV,QAAAA,KAAK,EAAEJ,WAAW,CAACc,KAAK,CAACV,KAAP,EAAcS,WAAd,EAA2BX,MAA3B;AADI,OAAL,CAAnB;AAGD,KArCkB;;AAEjB,SAAKY,KAAL,GAAa;AACXV,MAAAA,KAAK,EAAEX,WADI;AAEXiB,MAAAA,QAAQ,EAAE,KAAKA,QAFJ;AAGXF,MAAAA,QAAQ,EAAE,KAAKA;AAHJ,KAAb;AAKD;;AAEDW,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKL,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKP,KAAL,CAAWa,QADd,CADF;AAKD;;AAhByC;AAyC5C,eAAejB,WAAf","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport sampleItems from './sampleItems';\n\n// Helper functions\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n\n  return move(array, index, newIndex);\n}\n\n// Context\n\nconst GridContext = createContext({ items: [] });\n\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: sampleItems,\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n\n  render() {\n    return (\n      <GridContext.Provider value={this.state}>\n        {this.props.children}\n      </GridContext.Provider>\n    );\n  }\n\n  setItems = items => this.setState({ items });\n\n  moveItem = (sourceId, destinationId) => {\n    const sourceIndex = this.state.items.findIndex(\n      item => item.id === sourceId\n    );\n    const destinationIndex = this.state.items.findIndex(\n      item => item.id === destinationId\n    );\n\n    // If source/destination is unknown, do nothing.\n    if (sourceId === -1 || destinationId === -1) {\n      return;\n    }\n\n    const offset = destinationIndex - sourceIndex;\n\n    this.setState(state => ({\n      items: moveElement(state.items, sourceIndex, offset)\n    }));\n  };\n}\n\nexport default GridContext;\n"]},"metadata":{},"sourceType":"module"}