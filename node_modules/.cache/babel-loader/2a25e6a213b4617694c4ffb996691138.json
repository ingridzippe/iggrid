{"ast":null,"code":"var _jsxFileName = \"/Users/wyndolbar/Desktop/simplecoding/random/react-dnd-grid-tutorial/src/GridContext.js\";\nimport React, { Component, createContext } from \"react\";\nimport sampleItems from './sampleItems';\nimport firebase from \"firebase/app\";\nimport \"firebase/analytics\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\nimport { firebaseApp } from './firebase';\nvar firebaseDatabase = firebaseApp.database();\nvar firebaseStorageRef = firebase.storage().ref(); // Helper functions\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n  return move(array, index, newIndex);\n} // Context\n\n\nconst GridContext = createContext({\n  items: []\n});\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setItems = items => this.setState({\n      items\n    });\n\n    this.moveItem = (sourceId, destinationId) => {\n      const sourceIndex = this.state.items.findIndex(item => item.id === sourceId);\n      const destinationIndex = this.state.items.findIndex(item => item.id === destinationId); // If source/destination is unknown, do nothing.\n\n      if (sourceId === -1 || destinationId === -1) {\n        return;\n      }\n\n      const offset = destinationIndex - sourceIndex;\n      this.setState(state => ({\n        items: moveElement(state.items, sourceIndex, offset)\n      }));\n    };\n\n    this.state = {\n      items: sampleItems,\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"mounting\");\n    this.getGrid();\n  }\n\n  getGrid() {\n    var gridRef = firebase.database().ref('grids/' + 1);\n    gridRef.on('value', snapshot => {\n      const data = snapshot.val();\n      console.log('getGrid');\n      this.setState({\n        items: data\n      });\n    });\n  }\n\n  clicked() {\n    console.log('clicked');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(GridContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nexport default GridContext;","map":{"version":3,"sources":["/Users/wyndolbar/Desktop/simplecoding/random/react-dnd-grid-tutorial/src/GridContext.js"],"names":["React","Component","createContext","sampleItems","firebase","firebaseApp","firebaseDatabase","database","firebaseStorageRef","storage","ref","move","array","oldIndex","newIndex","length","splice","moveElement","index","offset","GridContext","items","GridProvider","constructor","props","setItems","setState","moveItem","sourceId","destinationId","sourceIndex","state","findIndex","item","id","destinationIndex","componentDidMount","console","log","getGrid","gridRef","on","snapshot","data","val","clicked","render","children"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport sampleItems from './sampleItems';\nimport firebase from \"firebase/app\";\nimport \"firebase/analytics\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\nimport {firebaseApp} from './firebase';\n\nvar firebaseDatabase = firebaseApp.database();\nvar firebaseStorageRef = firebase.storage().ref();\n\n\n// Helper functions\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n\n  return move(array, index, newIndex);\n}\n\n// Context\n\nconst GridContext = createContext({ items: [] });\n\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: sampleItems,\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n  componentDidMount() {\n    console.log(\"mounting\")\n    this.getGrid();\n  }\n  getGrid() {\n    var gridRef = firebase.database().ref('grids/' + 1);\n    gridRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      console.log('getGrid')\n      this.setState({ items: data })\n    });\n  }\n  clicked() {\n    console.log('clicked')\n  }\n  render() {\n    return (\n      <GridContext.Provider value={this.state}>\n        {this.props.children}\n      </GridContext.Provider>\n    );\n  }\n\n  setItems = items => this.setState({ items });\n\n  moveItem = (sourceId, destinationId) => {\n    const sourceIndex = this.state.items.findIndex(\n      item => item.id === sourceId\n    );\n    const destinationIndex = this.state.items.findIndex(\n      item => item.id === destinationId\n    );\n    // If source/destination is unknown, do nothing.\n    if (sourceId === -1 || destinationId === -1) {\n      return;\n    }\n    const offset = destinationIndex - sourceIndex;\n    this.setState(state => ({\n      items: moveElement(state.items, sourceIndex, offset)\n    }));\n  };\n\n}\n\nexport default GridContext;\n"]},"metadata":{},"sourceType":"module"}